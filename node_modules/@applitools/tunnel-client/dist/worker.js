"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a, _b;
var _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeTunnelClientWorker = void 0;
const logger_1 = require("@applitools/logger");
const socket_1 = require("@applitools/socket");
const client_1 = require("./client");
const generator_1 = require("./generator");
const fetch_resource_1 = require("./fetch-resource");
const metrics_1 = require("./metrics");
const path = __importStar(require("path"));
const ec_healthcheck_1 = require("./ec-healthcheck");
//@ts-ignore
const execution_grid_tunnel_1 = require("@applitools/execution-grid-tunnel");
(_a = (_c = process.env).APPLITOOLS_EG_TUNNEL_LOG_FILES_DIRECTORY) !== null && _a !== void 0 ? _a : (_c.APPLITOOLS_EG_TUNNEL_LOG_FILES_DIRECTORY = path.resolve(process.cwd(), 'logs'));
const LOG_DIRNAME = (_b = process.env.APPLITOOLS_LOG_DIR) !== null && _b !== void 0 ? _b : path.resolve(process.cwd(), 'logs');
function makeTunnelClientWorker({ settings, logger: defaultLogger, }) {
    const logger = (0, logger_1.makeLogger)({
        logger: defaultLogger,
        handler: { type: 'rolling file', name: 'tunnel-client', dirname: LOG_DIRNAME },
        format: { label: 'tunnel-client', colors: false },
        level: 'all',
    });
    logger.info('Tunnel client worker started');
    filterProcessWarnings(logger);
    const client = (0, client_1.makeTunnelClient)({ settings, logger });
    const generator = (0, generator_1.makeGenerator)({ settings: { ...settings, envInfo: (0, metrics_1.extractEnvInfo)() }, logger });
    const socket = (0, socket_1.makeSocket)(generator, { transport: 'generator', logger });
    const interval = setInterval(async () => {
        socket.emit('TunnelClient.list', await client.list());
        socket.emit('TunnelClient.metrics', (0, metrics_1.extractCurrentUsage)());
    }, 20000);
    const abortHealthCheckInterval = startEcHealthCheck();
    socket.command('TunnelClient.create', client.create);
    socket.command('TunnelClient.replace', client.replace);
    socket.command('TunnelClient.destroy', client.destroy);
    socket.command('TunnelClient.fetch', fetch_resource_1.fetchResource);
    socket.on('TunnelClient.close', async (reason) => {
        logger.fatal('Worker is going to be closed due to a reason', reason);
        clearInterval(interval);
        abortHealthCheckInterval();
        await client.close();
    });
    socket.on('error', async (reason) => {
        logger.fatal('Worker is going to be closed due to an error', reason);
        clearInterval(interval);
        abortHealthCheckInterval();
        await client.close();
    });
    process.on('unhandledRejection', error => {
        logger.error('Unhandled promise rejection', error);
        /* eslint-disable-next-line no-console */
        console.error('Unhandled promise rejection', error);
    });
    process.on('uncaughtException', error => {
        logger.error('Uncaught error terminating the process', error);
        /* eslint-disable-next-line no-console */
        console.error('Uncaught error terminating the process', error);
        process.exit(1);
    });
    return socket;
    function startEcHealthCheck() {
        var _a, _b;
        const ecHealthCheckInterval = (_a = settings.ecHealthCheckInterval) !== null && _a !== void 0 ? _a : 0; // TODO: change to 60_000
        const ecServerUrl = (_b = settings.serviceUrl) !== null && _b !== void 0 ? _b : (settings.region === 'australia-southeast' ? 'https://exec-au.applitools.com' : 'https://exec-wus.applitools.com');
        logger.log('EC health check interval is set to', settings.ecHealthCheckInterval);
        logger.log('EC server URL is set to', ecServerUrl);
        if (settings.ecHealthCheckInterval) {
            doHealthCheckAndEmit();
            const interval = setInterval(doHealthCheckAndEmit, ecHealthCheckInterval);
            interval.unref();
            return () => clearInterval(interval);
        }
        else {
            return () => { };
        }
        async function doHealthCheckAndEmit() {
            const ecHealthCheckStatus = await (0, ec_healthcheck_1.performEcHealthCheck)({ ecServerUrl, connectivityTest: execution_grid_tunnel_1.connectivityTest, logger });
            socket.emit('TunnelClient.EcHealthCheck', ecHealthCheckStatus);
        }
    }
}
exports.makeTunnelClientWorker = makeTunnelClientWorker;
function filterProcessWarnings(logger) {
    process.removeAllListeners('warning');
    const warningsIgnoreList = ['NODE_TLS_REJECT_UNAUTHORIZED', 'ExperimentalWarning'];
    process.on('warning', warning => {
        if (warningsIgnoreList.some(warningName => warning.name.includes(warningName))) {
            logger === null || logger === void 0 ? void 0 : logger.warn(`Ignoring warning: ${warning.name} - ${warning.message}`);
            return;
        }
        // eslint-disable-next-line no-console
        console.warn(warning);
    });
}
