"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.performEcHealthCheck = void 0;
async function performEcHealthCheck(options) {
    // remove this code when the EC health check is implemented
    options.logger.log(`returning mock EC health check to server URL ${options.ecServerUrl}`);
    return {
        verified_at: Date.now(),
        status: 'success',
    };
    // uncomment this code when the EC health check is implemented
    /****** START COMMENT - delete this line
    const {ecServerUrl, connectivityTest, logger} = options
    const req = makeReq({
      baseUrl: ecServerUrl,
      hooks: [handleLogs({logger})],
    })
    try {
      const statusResult = await req('/status', {requestTimeout: 5_000})
      if (statusResult.status !== 200) {
        const body = await statusResult.text()
        return {
          verified_at: Date.now(),
          status: 'error',
          error_code: 'ERR_',
          error: `Unexpected status ${statusResult.status} received with body ${body}`,
        }
      }
    } catch (error) {
      return {
        verified_at: Date.now(),
        status: 'error',
        error_code: 'ERR_UNREACHABLE',
        error: (error as any)?.message ?? String(error),
      }
    }
  
    const connectivityTestResult = await connectivityTest()
    if (connectivityTestResult.success) {
      return {
        verified_at: Date.now(),
        status: 'success',
      }
    } else {
      return {
        verified_at: Date.now(),
        status: 'error',
        error_code: 'ERR_CONNECTIVITY_TEST_FAILED',
        error: connectivityTestResult.error,
        // TODO what should be done with connectivityTestResult.timeTaken ?
      }
    }
    ****** END COMMENT - delete this line */
}
exports.performEcHealthCheck = performEcHealthCheck;
